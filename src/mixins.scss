// Consistent Font Sizes
@function calculateRem($size) {
    $remSize: $size / 16px;
    @return $remSize * 1rem;
}

@mixin font-size($size) {
    font-size: $size;
    font-size: calculateRem($size);
}

//   p {
//   @include font-size(14px)
// }

@mixin font($sz, $wt, $cl) {
    @include font-size($sz);
    font-weight: $wt;
    color: $cl;
}



// When using ::before and ::after you'll always need these three
@mixin pseudo($display: block, $pos: absolute, $content: "") {
    content: $content;
    display: $display;
    position: $pos;
}

// div::after {
//     @include pseudo;
//     top: -1rem; left: -1rem;
//     width: 1rem; height: 1rem;
// }

// use this for creating scalable elements (usually images / background images) that maintain a ratio.
@mixin responsive-ratio($x, $y, $pseudo: false) {
    $padding: unquote(($y / $x) * 100 + "%");
    @if $pseudo {
        &:before {
            @include pseudo($pos: relative);
            width: 100%;
            padding-top: $padding;
        }
    } @else {
        padding-top: $padding;
    }
}

// div {
//     @include responsive-ratio(16,9);
// }

// Placeholders
@mixin input-placeholder {
    &.placeholder {
        @content;
    }
    &:-moz-placeholder {
        @content;
    }
    &::-moz-placeholder {
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }
    &::-webkit-input-placeholder {
        @content;
    }
}

// input,
// textarea {
//     @include input-placeholder {
//         color: $grey;
//     }
// }

// Media Queries
$breakpoints: (
    "phone": 400px,
    "phone-wide": 480px,
    "phablet": 560px,
    "tablet-small": 640px,
    "tablet": 768px,
    "tablet-wide": 1024px,
    "desktop": 1248px,
    "desktop-wide": 1440px,
);
@mixin mq($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}

// .site-header {
//     padding: 2rem;
//     font-size: 1.8rem;
//     @include mq('tablet-wide') {
//         padding-top: 4rem;
//         font-size: 2.4rem;
//     }
// }

// Centering Elements
@mixin center($position) {
    position: absolute;

    @if $position == "vertical" {
        top: 50%;
        -webkit-transform: translateY(-50%);
        -ms-transform: translateY(-50%);
        transform: translateY(-50%);
    } @else if $position == "horizontal" {
        left: 50%;
        -webkit-transform: translateX(-50%);
        -ms-transform: translateX(-50%);
        transform: translate(-50%);
    } @else if $position == "both" {
        top: 50%;
        left: 50%;
        -webkit-transform: translate(-50%, -50%);
        -ms-transform: translate(-50%, -50%);
        transform: translate(-50%, -50%);
    }
}

//   .foo {
//     @include center(both);
//   }
//   .foo-parent {
//     position: relative;
//   }


@mixin push--auto {
    margin: {
        left: auto;
        right: auto;
    }
}


// Background gradient
@mixin background-gradient($start-color, $end-color, $orientation)
 {
 background: $start-color;
 @if $orientation == vertical
 {
 // vertical
 background: -moz-linear-gradient(top,  $start-color 0%, $end-color 100%);
 background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$start-color), color-stop(100%,$end-color));
 background: -webkit-linear-gradient(top,  $start-color 0%,$end-color 100%);
 background: -o-linear-gradient(top,  $start-color 0%,$end-color 100%);
 background: -ms-linear-gradient(top,  $start-color 0%,$end-color 100%);
 background: linear-gradient(to bottom,  $start-color 0%,$end-color 100%);
 filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=0 );
 }
 @else if $orientation == horizontal
 {
 // horizontal
 background: -moz-linear-gradient(left,  $start-color 0%, $end-color 100%);
 background: -webkit-gradient(linear, left top, right top, color-stop(0%,$start-color), color-stop(100%,$end-color));
 background: -webkit-linear-gradient(left,  $start-color 0%,$end-color 100%);
 background: -o-linear-gradient(left,  $start-color 0%,$end-color 100%);
 background: -ms-linear-gradient(left,  $start-color 0%,$end-color 100%);
 background: linear-gradient(to right,  $start-color 0%,$end-color 100%);
 filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
 }
 @else
 {
 // radial
 background: -moz-radial-gradient(center, ellipse cover,  $start-color 0%, $end-color 100%);
 background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$start-color), color-stop(100%,$end-color));
 background: -webkit-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
 background: -o-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
 background: -ms-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
 background: radial-gradient(ellipse at center,  $start-color 0%,$end-color 100%);
 filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
 }
 }

// .foo {
//     @include background-gradient(red, black, 'vertical');
//   }


//Padding mixin
@mixin padding($top, $right, $bottom, $left) {
    padding-top: $top;
    padding-right: $right;
    padding-bottom: $bottom;
    padding-left: $left;
  }
  //Margin mixin
  @mixin margin($top, $right, $bottom, $left) {
    margin-top: $top;
    margin-right: $right;
    margin-bottom: $bottom;
    margin-left: $left;
  }

  // Usage 2 (with null properties)
// @include padding(1px, null, 3px, 4px);
// @include margin(1px, 2px, null, 4px);
// Usage 1
// @include padding(1px, 2px, 3px, 4px,);
// @include margin(1px, 2px, 3px, 4px);


// Flexbox 
@mixin flex-column {
    display: flex;
    flex-direction: column;
  }
  
  @mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  @mixin flex-center-column {
    @include flex-center;
    flex-direction: column;
  }
  
  @mixin flex-center-vert {
    display: flex;
    align-items: center;
  }
  
  @mixin flex-center-horiz {
    display: flex;
    justify-content: center;
  }

//   .vertical-centered-element {
//     @include flex-center-vert;
//   }
  
//   .horizontally-centered-element {
//     flex-direction: column;
//     @include flex-center-vert;
//   }


//Opacity
@mixin opacity($opacity) {
    opacity: $opacity;
   filter: alpha(opacity=($opacity * 100));
}

// div {
//     @include opacity(0.5);
//     }

// Flexbox display
@mixin flexbox {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
  }
  
  // Inline flex display
  @mixin inline-flex {
    display: -webkit-inline-box;
    display: -moz-inline-box;
    display: -webkit-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
  }
  
  // The 'flex' shorthand
  // - applies to: flex items
  // <positive-number>, initial, auto, or none
  @mixin flex($fg: 1, $fs: 0, $fb: auto) {
  
    // Set a variable to be used by box-flex properties
    $fg-boxflex: $fg;
  
    // Box-Flex only supports a flex-grow value so lets grab the
    // first item in the list and just return that.
    @if type-of($fg) == 'list' {
      $fg-boxflex: nth($fg, 1);
    }
  
     -webkit-box: $fg-boxflex;
        -moz-box: $fg-boxflex;
    -webkit-flex: $fg $fs $fb;
        -ms-flex: $fg $fs $fb;
            flex: $fg $fs $fb;
  }
  
  // Flex Flow Direction
  // - applies to: flex containers
  // row (default) | row-reverse | column | column-reverse
  @mixin flex-direction($direction: row) {
    @if $direction == row-reverse {
      -webkit-box-direction: reverse;
      -webkit-box-orient: horizontal;
         -moz-box-direction: reverse;
         -moz-box-orient: horizontal;
    } @else if $direction == column {
      -webkit-box-direction: normal;
       -webkit-box-orient: vertical;
         -moz-box-direction: normal;
          -moz-box-orient: vertical;
    } @else if $direction == column-reverse {
      -webkit-box-direction: reverse;
        -webkit-box-orient: vertical;
         -moz-box-direction: reverse;
           -moz-box-orient: vertical;
    } @else {
       -webkit-box-direction: normal;
      -webkit-box-orient: horizontal;
          -moz-box-direction: normal;
         -moz-box-orient: horizontal;
    }
    -webkit-flex-direction: $direction;
        -ms-flex-direction: $direction;
            flex-direction: $direction;
  }
  
  // Flex Line Wrapping
  // - applies to: flex containers
  // nowrap | wrap | wrap-reverse
  @mixin flex-wrap($value: nowrap) {
    // No Webkit/FF Box fallback.
    -webkit-flex-wrap: $value;
    @if $value == nowrap {
      -ms-flex-wrap: none;
    } @else {
      -ms-flex-wrap: $value;
    }
    flex-wrap: $value;
  }
  
  // Flex Direction and Wrap
  // - applies to: flex containers
  // <flex-direction> || <flex-wrap>
  @mixin flex-flow($values: (row nowrap)) {
    // No Webkit/FF Box fallback.
    -webkit-flex-flow: $values;
        -ms-flex-flow: $values;
            flex-flow: $values;
  }
  
  // Display Order
  // - applies to: flex items
  // <integer>
  @mixin order($int: 0) {
    -webkit-box-ordinal-group: $int + 1;
       -moz-box-ordinal-group: $int + 1;
                -webkit-order: $int;
               -ms-flex-order: $int;
                        order: $int;
  }
  
  // Flex grow factor
  // - applies to: flex items
  // <number>
  @mixin flex-grow($int: 1) {
     -webkit-box-flex: $int;
        -moz-box-flex: $int;
    -webkit-flex-grow: $int;
             -ms-flex: $int;
            flex-grow: $int;
  }
  
  // Flex shrink
  // - applies to: flex item shrink factor
  // <number> 
  @mixin flex-shrink($int: 0) {
    -webkit-flex-shrink: $int;
       -moz-flex-shrink: $int;
               -ms-flex: $int;
            flex-shrink: $int;
  }
  
  // Flex basis
  // - the initial main size of the flex item
  // - applies to: flex itemsnitial main size of the flex item
  // <width> 
  @mixin flex-basis($value: auto) {
    -webkit-flex-basis: $value;
            flex-basis: $value;
  }
  
  // Axis Alignment
  // - applies to: flex containers
  // flex-start | flex-end | center | space-between | space-around 
  @mixin justify-content($value: flex-start) {
    @if $value == flex-start {
      -webkit-box-pack: start;
         -moz-box-pack: start;
         -ms-flex-pack: start;
    } @else if $value == flex-end {
      -webkit-box-pack: end;
         -moz-box-pack: end;
         -ms-flex-pack: end;
    } @else if $value == space-between {
      -webkit-box-pack: justify;
         -moz-box-pack: justify;
         -ms-flex-pack: justify;
    } @else if $value == space-around {
         -ms-flex-pack: distribute;
    } @else {
      -webkit-box-pack: $value;
         -moz-box-pack: $value;
         -ms-flex-pack: $value;
    }
    -webkit-justify-content: $value;
            justify-content: $value;
  }
  
  // Packing Flex Lines
  // - applies to: multi-line flex containers
  // flex-start | flex-end | center | space-between | space-around | stretch 
  @mixin align-content($value: stretch) {
    // No Webkit Box Fallback.
    -webkit-align-content: $value;
    @if $value == flex-start {
      -ms-flex-line-pack: start;
    } @else if $value == flex-end {
      -ms-flex-line-pack: end;
    } @else {
      -ms-flex-line-pack: $value;
    }
    align-content: $value;
  }
  
  // Cross-axis Alignment
  // - applies to: flex containers
  // flex-start | flex-end | center | baseline | stretch 
  @mixin align-items($value: stretch) {
    @if $value == flex-start {
      -webkit-box-align: start;
         -moz-box-align: start;
         -ms-flex-align: start;
    } @else if $value == flex-end {
      -webkit-box-align: end;
         -moz-box-align: end;
         -ms-flex-align: end;
    } @else {
      -webkit-box-align: $value;
         -moz-box-align: $value;
         -ms-flex-align: $value;
    }
    -webkit-align-items: $value;
            align-items: $value;
  }
  
  // Cross-axis Alignment
  // - applies to: flex items
  // auto | flex-start | flex-end | center | baseline | stretch 
  @mixin align-self($value: auto) {
    // No Webkit Box Fallback.
    -webkit-align-self: $value;
    @if $value == flex-start {
      -ms-flex-item-align: start;
    } @else if $value == flex-end {
      -ms-flex-item-align: end;
    } @else {
      -ms-flex-item-align: $value;
    }
    align-self: $value;
  }